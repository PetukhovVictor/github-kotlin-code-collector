import os
import json

from lib.helper.PathHelper import PathHelper
from lib.helper.TimeLogger import TimeLogger


class AstSeparators:
    nodes = '\n================\n'
    type_and_sources = '\n:::::::::\n'
    node_level = '-'


class AstHelper:
    folder = 'ast'

    @staticmethod
    def text2json(code_file, is_measure_time=True):
        """
        Convert file with AST (generated by custom kotlin compiler - "academic version") to JSON
        """
        if is_measure_time:
            time_logger = TimeLogger()

        f = open('ast.data', 'r')
        nodes = f.read().split(AstSeparators.nodes)
        current_nodes = []
        current_level = 1
        parent_nodes = []
        for node_row in nodes:
            node = node_row.split(AstSeparators.type_and_sources)
            if len(node) < 2:
                continue
            node_type = node[0]
            node_chars = node[1]
            level = node_type.count(AstSeparators.node_level)
            node_type_clear = node_type.split(AstSeparators.node_level)
            node_type_clear = node_type_clear[len(node_type_clear) - 1]

            if level == current_level:
                current_nodes.append({
                    'type': node_type_clear,
                    'chars': node_chars
                })
            elif level > current_level:
                last_node = current_nodes[len(current_nodes) - 1]
                parent_nodes.append(current_nodes)
                last_node['children'] = [{
                    'type': node_type_clear,
                    'chars': node_chars
                }]
                current_nodes = last_node['children']
                current_level = level
            elif level < current_level:
                i = 0
                while i < current_level - level:
                    current_nodes = parent_nodes.pop()
                    i += 1
                current_nodes.append({
                    'type': node_type_clear,
                    'chars': node_chars
                })
                current_level = level
        f.close()
        os.remove('ast.data')

        while len(parent_nodes) != 0:
            current_nodes = parent_nodes.pop()

        ast_json = json.dumps(current_nodes)

        path = AstHelper.folder + '/' + PathHelper.calculate(code_file.number) + '.json'
        basename = os.path.basename(path)
        dirname = os.path.dirname(path)
        if not os.path.exists(dirname):
            os.makedirs(dirname)

        f = open(dirname + '/' + basename, 'w')
        f.write(ast_json)
        f.close()

        if is_measure_time:
            return time_logger.finish()
